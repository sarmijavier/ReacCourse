{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAbW,SAAEC,GAEnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAC,GAAD,IAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA0BR,EAAeQ,S,+BCN1DG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,yFAC4EC,UAAUH,GADtF,sBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAZO,kBAaZA,GAbY,4CAAH,sDCCPS,EAAc,SAAC,GAAsB,IAAnBL,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKgB,UAAU,gDAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCHJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAsBxC,OAdAC,qBAAU,WAEN1B,EAASC,GACR0B,MAAM,SAAAC,GAEHH,EAAS,CACDjB,KAAMoB,EACNL,SAAS,MAGd,OAER,CAAEtB,IAEEuB,EDpB0BK,CAAc5B,GAAlCa,EAFwB,EAE7BN,KAAae,EAFgB,EAEhBA,QAGrB,OACI,qCACI,oBAAIJ,UAAU,2CAAd,SAA2DlB,IAEzDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEd,qBAAKA,UAAU,YAAf,SAESL,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAAiCA,GAAdA,EAAIC,aEgBhCkB,EA7BM,WAAO,IAAD,EAGa3C,mBAAS,CAAC,cAHvB,mBAGhB4C,EAHgB,KAGJ7C,EAHI,KAMvB,OACI,eAAC,WAAD,WACI,gDAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCjBlC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7ed5de86.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    \n    const [inputValue, setinputValue] = useState('')\n    \n    const handleInputChange = ({ target: { value }}) => setinputValue( value )\n    \n    const handleSubmit = ( e ) => {\n\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ){ \n            setCategories( cats => [ inputValue, ...cats] );\n            setinputValue('')\n        }\n\n    }\n\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            /> \n        </form>\n        \n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async ( category ) => {\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=kj1k146coNwxrLy5USOkt9XS974zG0r4&q=${ encodeURI(category) }&limit=10`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    const  gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n    return gifs; // return a promise\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n    \n    return (\n        <div className=\"card animate__animated animate__fadeInLeftBig\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images ,loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInLeftBig\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n           <div className=\"card-grid\">\n                {\n                    images.map( ( img ) => (\n                        <GifGridItem key={ img.id } { ...img }/>\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","\nimport { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    \n    useEffect(() => {\n        \n        getGifs( category )\n        .then( imgs => {\n            \n            setState({\n                    data: imgs,\n                    loading: false\n                });\n                \n            }, 3000);\n            \n    }, [ category ])\n\n    return state; \n\n\n\n}","import React, { Fragment , useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n    \n    \n    const [categories, setCategories] = useState(['One Punch']);\n    \n    \n    return (\n        <Fragment>\n            <h2>Gif Expert App</h2>\n\n            <AddCategory setCategories={ setCategories }/>\n\n            <hr />\n\n            <ol>\n                { \n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category } \n                        />\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n}\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n \n\n//GifExpertApp\n// <h2>GifExpertApp </h2>\n// <hr />"],"sourceRoot":""}